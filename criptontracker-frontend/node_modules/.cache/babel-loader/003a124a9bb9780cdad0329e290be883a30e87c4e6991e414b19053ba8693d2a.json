{"ast":null,"code":"var _jsxFileName = \"/Users/eiahrjay/Desktop/criptontracker-frontend/src/context/CryptoContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/CryptoContext.js\nimport React, { createContext, useState, useContext } from 'react';\nimport { fetchCryptoData } from '../fluxo'; // Asegúrate de tener las funciones necesarias importadas\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CryptoContext = /*#__PURE__*/createContext();\nexport const CryptoProvider = ({\n  children\n}) => {\n  _s();\n  const [cryptoData, setCryptoData] = useState([]);\n  const loadCryptoData = async () => {\n    try {\n      const data = await fetchCryptoData();\n      setCryptoData(data);\n    } catch (error) {\n      console.error('Error loading crypto data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CryptoContext.Provider, {\n    value: {\n      cryptoData,\n      loadCryptoData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(CryptoProvider, \"4Td+FnuYPQ7+sRgph58WMO3TQYg=\");\n_c = CryptoProvider;\nexport const useCrypto = () => {\n  _s2();\n  return useContext(CryptoContext);\n};\n_s2(useCrypto, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CryptoProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","fetchCryptoData","jsxDEV","_jsxDEV","CryptoContext","CryptoProvider","children","_s","cryptoData","setCryptoData","loadCryptoData","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCrypto","_s2","$RefreshReg$"],"sources":["/Users/eiahrjay/Desktop/criptontracker-frontend/src/context/CryptoContext.js"],"sourcesContent":["// src/context/CryptoContext.js\nimport React, { createContext, useState, useContext } from 'react';\nimport { fetchCryptoData } from '../fluxo'; // Asegúrate de tener las funciones necesarias importadas\n\nconst CryptoContext = createContext();\n\nexport const CryptoProvider = ({ children }) => {\n  const [cryptoData, setCryptoData] = useState([]);\n\n  const loadCryptoData = async () => {\n    try {\n      const data = await fetchCryptoData();\n      setCryptoData(data);\n    } catch (error) {\n      console.error('Error loading crypto data:', error);\n    }\n  };\n\n  return (\n    <CryptoContext.Provider value={{ cryptoData, loadCryptoData }}>\n      {children}\n    </CryptoContext.Provider>\n  );\n};\n\nexport const useCrypto = () => useContext(CryptoContext);\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,eAAe,QAAQ,UAAU,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMO,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMV,eAAe,CAAC,CAAC;MACpCQ,aAAa,CAACE,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED,oBACET,OAAA,CAACC,aAAa,CAACU,QAAQ;IAACC,KAAK,EAAE;MAAEP,UAAU;MAAEE;IAAe,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACZ,EAAA,CAjBWF,cAAc;AAAAe,EAAA,GAAdf,cAAc;AAmB3B,OAAO,MAAMgB,SAAS,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMtB,UAAU,CAACI,aAAa,CAAC;AAAA;AAACkB,GAAA,CAA5CD,SAAS;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}